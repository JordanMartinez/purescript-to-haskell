name:                my-servant
version:             0.1.0.0
github:              "githubuser/my-servant"
license:             BSD3
author:              "Author name here"
maintainer:          "example@example.com"
copyright:           "2019 Author name here"

extra-source-files:
- README.md

# Metadata used when publishing your package
# synopsis:            Short description of your package
# category:            Web

# To avoid duplicated efforts in documentation and dealing with the
# complications of embedding Haddock markup inside cabal files, it is
# common to point users to the README.md file.
description:         Please see the README on GitHub at <https://github.com/githubuser/my-servant#readme>

dependencies:
- base

# TH
- safe # expose safer wrappers around unsafe Prelude functions
- template-haskell

# Core: Non Text
- unordered-containers
- containers
- vector
- time

# Core: Text
- bytestring
- text
- case-insensitive

# Core: HTTP Types
- http-types

# Domain: Seralization
- aeson

# API/Infrastructure: Database
- persistent
- persistent-postgresql
- persistent-template

# API: Web Application Interface
- wai
- wai-extra
- wai-logger

# Infrastructure: Web Server
- warp
- http-client-tls

# Servant
- servant

- servant-auth

- servant-docs
- servant-auth-docs

- servant-swagger
- servant-swagger-ui
- servant-auth-swagger

- servant-server
- servant-auth-server

- servant-multipart

library:
  source-dirs: src

  # Make developer experience similar to PureScript
  default-extensions:
  - KindSignatures
  - LiberalTypeSynonyms
  - EmptyDataDecls
  - OverloadedLists
  - OverloadedStrings
  - NumericUnderscores
  - NegativeLiterals
  - MultiParamTypeClasses
  - ConstrainedClassMethods
  - FlexibleInstances
  - FlexibleContexts
  - FunctionalDependencies
  - ConstraintKinds
  - InstanceSigs
  - DeriveFunctor
  - DeriveFoldable
  - DeriveTraversable
  - GeneralizedNewtypeDeriving
  - DerivingVia
  - MonoLocalBinds
  - PatternGuards
  - ScopedTypeVariables
  - RankNTypes
  - LambdaCase
  - BlockArguments
  - TypeApplications
  - RecordWildCards
  - NamedFieldPuns
  - ApplicativeDo
  - BangPatterns
  - PartialTypeSignatures
  - ExplicitNamespaces
  # Haskell-Only stuff
  - TemplateHaskell
  - PolyKinds

  ghc-options:
  - -Wall
  - -Wincomplete-uni-patterns
  - -Wincomplete-record-updates
  - -Wmissing-export-lists
  - -Widentities
  - -Wredundant-constraints
  - -Wpartial-fields
  - -Wcompat
  - -fprint-expanded-synonyms
  - -fprint-explicit-foralls
  - -ferror-spans
  - -fwarn-tabs
  - -O0

executables:
  my-servant-exe:
    main:                Main.hs
    source-dirs:         app
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
    - my-servant

tests:
  my-servant-test:
    main:                Spec.hs
    source-dirs:         test
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
    - my-servant
    - quickcheck
    - servant-quickcheck
    - hspec
    - hspec-wai
    - hspec-wai-json
    - aeson
